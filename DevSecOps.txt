#######################################################################
## Notes on DevSecOps
#######################################################################

Topics which will be covered:

# Module 1
    Basics of Linux
    Server Management in Linux
    Vagrant
    Basics of networking
    Project
        Vprofile Project Intro & Setup on VM’s

# Module 2
    Bash Scripting
    Basics of scripting
    Variables, Conditions, Loops etc
    Automating day to day admin tasks

# Module 3
    Cloud Computing Intro
    IAM
    Ec2 Instances, EBS Volumes, ELB
    S3
    Cloudwatch
    RDS
    Autoscaling
    Route53
    Project
        AWS Cloud For Project Set Up Lift & Shift
        Re-Architecting Web App on AWS Cloud [PAAS & SAAS]


# Module 4
    Version control system = Git & GitHub
    Build Tools | Build & Test Java Code = Maven
    Continuous Integration Intro
    Jenkins
        Jenkins as a Build Server
        Jenkins Jobs | Build , Test, Deploy, Notify
        Jenkins Master/Slave, Nexus, Sonarqube
        Jenkins CI Pipeline
        Jenkins Administration
    Project
        Continuous Integration Using Jenkins, Nexus, Sonarqube & Slack

# Module 5
    Python Scripting
    Basics of python programming
    vars, datatypes, conditions, loops, function, modules etc
    Pythons for automating OS tasks

# Module 6
    Ansible Intro
    Ad Hoc commands
    Modules
    YAML into
    Playbooks
        vars, conditions, loops,
        handlers, templates etc etc etc
    Variables deep dive
    Roles
    Ansible for AWS
    Project
        Continuous Delivery and Configuration Management [Jenkins plus Ansible]

# Module 7
    AWS Part 2
    VPC in depth
    Log management and custom metrics
    Project
        Vprofile on Beanstalk & RDS
        Code Commit, Code Build & Code Pipeline
        CI & CD on AWS Cloud for Vprofile Project
        Beanstalk, RDS, CodePipeline etc

# Module 8
    Docker Intro
    Understanding and Implementing Containers
    Volumes, Network, logs etc
    Building Images for Vprofile project
    Docker compose to run vprofile multi containers
    Kubernetes Intro
    Kubernetes setup for production Env
    Kubernetes objects
        Pods, Services, Controllers, Deployment
        Replication, Autoscaling, Resource quotas, secret, configmap, namespace.
    Project
        Vprofile Project deployment on Kubernetes

# Module 9
    Terraform for AWS Cloud automation
    Cloudformation for AWS loud automation

#################################################################################

# Module 1

    Basics of Linux
    Server Management in Linux
    Vagrant
    Basics of networking
    Project
        Vprofile Project Intro & Setup on VM’s
###################################################################################

SDLC - Software Development LifeCycle
    -- Waterfall
    -- Agile
    -- Spiral

########################
Diffrence between Development and Operations

Development:
    In todays time there is an emphasis on using faster iterations to be able to build 
    a working model of the software as soon as possible.
    It is all about regular and quick changes

Operations:
    Operations on the other hand prefers stability and wants to impart the principles of ITIL in their daily workings

#########################
DevOps LifeCycle

Code - Developers commit the Code
Code Build - Deployable software AKA Artifact

Code Test - Unit & Integration Test
Code Analysis - Vulnerability, best practices

Delivery - Deploy changes to staging
DB/Security/OS Changes - Every other Ops Changes 

Software Testing - QA/Functional, load, performance tests
Deploy to Prod 
Go Live - User traffic diverted to new changes 
User Approval - User feedback to new changes
Monitoring 
##############################
# Continuous Integration / Continuous Delivery
# CI/CD 
##############################
Continuous Integration - is an automated process in DevOps, which generates software and its feature    
    quickly and efficeiently

If all the tests run well the finsihed software with the incremental feature is called an Artifact

###############################
Continuous Delivery

CD is the continuation of CI, it is build upon CI 

Deployment just doesnt mean Implementing the new artifact in the server, it also deals with 
    -   Server provisioning
    -   Dependencies mitigation
    -   Configuration Changes
    -   Network changes
    -   Deploying the Artifact to the server

###############################

Implementation of CI/CD manually is a tremendous amount of task and requires a lot of human intervention in each and every step

The best thing to be done is automate all the steps in the CI/CD pipeline

####################################

The best way to implement DevOps is to automate each step on the way to the user and then connect all the automated steps together

####################################

## Tools to install for the Course
    1. Choclatey - To install all the other packages easily
    2. Homebrew for MacOS
    3. Install Vagrant
    4. Oracle VMware
    5. Maven
    6. JDK
    7. Install Git 
    8. Install Maven

## Websites to register on:
    1. DockerHub
    2. SonarCloud
    3. AWS

###################################

What is Virtualization?
    -> One computer doing the job of multiple computers, running multiple OS at the same time.
    -> Using VMware
    -> allows one computer to run multiple OS
    -> Partition physical resource in virtual resource
    -> VM runs in isolated environments
    -> Each VM needs its own OS
    -> Server Virtualization is the most common form of virtualization
    -> We use HyperVisor to hold multiple VMs on top of a hardware installation

# Common Terminologies in DevOps
    -   Host OS - The OS on top of the actual hardware
    -   Guest OS -  OS of VM 
    -   Snapshot - way of taking a backup of the machine
    -   HyperVisor - Lets us do virtualization
        -   Type 1  
            -   AKA BARE METAL 
            -   Run as a Base OS 
            -   used for Production use case
            -   Ex: VMware esxi, Xen Hypervisor
        -   Type 2
            -   This runs as a software
            -   For learning and Testing 
            -   Ex: Oracle 

        Note - the type 1 Hypervisor can be clusetered and used for load sharing 

Note - Always implement One Service - One Server(isolation)
    -   Servers are always supposed to be overprovisioned


## Installing VMs in VBox, both automatically and manually
    -   Manually using a iso file 
    -   Automatically using Vagarant

#Lesson - know how to do things manually before going for automation

#####################################
## Vagrant 
1. Intro to Vagrant
    Vagrant is a autmoation tool to setup VM’s

    VM Management Problems:
        1. OS Installation is time consumimng
        Tough to replicate for multin VM

    In Vagrant there is no OS installation
    VM Setup through images(Vagrant boxes)
    Vagrantfile used for storing configs

    How vagrant works is it has Vagrant images stored on the cloud which it fetches from the Web to be able to create a VM on the Hypervisor
    

2. Create VM automatically
    Go to vagarnat cloud and find the name of the box which is to be installled

    CLI Commands for installing a Vagarant Image (Run these commands on Git Bash)
    >> vagarant init <box name>
    box name is found from vagarnat cloud website, these are the list of OS which can be installed using vagarnat
    This will initialize the Vagarant in the repository
    >> vagarnat up
    This will read the file and create the VM
    >>vagarnat ssh
    This will log you into the VM as a Vagarnat user

    >> Vagarnat hall - This will stop the VM

    >> Vagarant destroy - This removes the VM from the system
    >> Vagarant reload - to restart
    

3. Vagrant Commands

4. Vagrant Networking

5. Provisioning

6. RAM, CPU and Disk of VM 

7. Multi VM Vagrantfile

####################################
## Linux 

# Linux fundamental principles
    -   Everything is a file including the hardware
    -   Small single purpose programs
    -   Ability to chain programs together for complex Operations
    -   Avoidance of captive UI 
    -   Configurations are stored in text files

# Common Linux for Servers
    -   RedHat Enterprise Linux - Not Open Source License purchase is required
    -   Ubuntu Server - Open Source
    -   CentOS 
    -   Fedora - Open Source

# Packaging method of Linux Distros
    RPM based : RHEL, CentOS, Oracle Linux, Amazon Linux
    Debian based : Ubuntu Server, Kali Linux

    Red Hat distros are more stable and secure as compared to other distors
    


